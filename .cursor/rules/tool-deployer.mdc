---
description: 
globs: 
alwaysApply: true
---

# Your rule content

I want to create a library in my current codebase in libs folder. That can do the following:

1. Using agno custom tools deployment lib, where users will provide me a python code "function" with parameters or pydantic model as Input and Output. Mind that input and output must be properly defined.
2.  Mandatory fields, python function code, import statements, requirements ( figure out a way to easefully get that from the user ), inputs and outputs, and tool description.
3. Validate all the required things that we need to create that tool.
4. Now we need to create the fully functional code, that can be integrated in an agent. For this we can use jinja templating to reuse modular code.
5. After this we would have tools folder, in that we have folder "{tool}" and in that we have tool code and the requirements. 
6. As from the above requirements, I've been discussing about agno only, I want to architect this lib in such a way, (wrapper -> Tools -> Dependencies). So, if later I wanted to switch to langchain, it would be possible to convert existing tools to a langchain wrapper.

Sample Agno code for creating tools 

```python
import asyncio
import time

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.utils.log import logger

async def atask1(delay: int):
    """Simulate a task that takes a random amount of time to complete
    Args:
        delay (int): The amount of time to delay the task
    """
    logger.info("Task 1 has started")
    for _ in range(delay):
        await asyncio.sleep(1)
        logger.info("Task 1 has slept for 1s")
    logger.info("Task 1 has completed")
    return f"Task 1 completed in {delay:.2f}s"


async def atask2(delay: int):
    """Simulate a task that takes a random amount of time to complete
    Args:
        delay (int): The amount of time to delay the task
    """
    logger.info("Task 2 has started")
    for _ in range(delay):
        await asyncio.sleep(1)
        logger.info("Task 2 has slept for 1s")
    logger.info("Task 2 has completed")
    return f"Task 2 completed in {delay:.2f}s"


async def atask3(delay: int):
    """Simulate a task that takes a random amount of time to complete
    Args:
        delay (int): The amount of time to delay the task
    """
    logger.info("Task 3 has started")
    for _ in range(delay):
        await asyncio.sleep(1)
        logger.info("Task 3 has slept for 1s")
    logger.info("Task 3 has completed")
    return f"Task 3 completed in {delay:.2f}s"


async_agent = Agent(
    model=OpenAIChat(id="gpt-4o-mini"),
    tools=[atask2, atask1, atask3],
    show_tool_calls=True,
    markdown=True,
)

asyncio.run(
    async_agent.aprint_response("Please run all tasks with a delay of 3s", stream=True)
)
```

Considerations:
1. I think we also take Entrypoint, otherwise how would we know what Function name needs to go in agent.
2. we can also give feature of .env, lets say if they want to user some service that need API key or token or something, elese. But we need to think, once we create and deploy the tool, how it would be consumed by the client? what if some env expired ? can client put there own env ? can we provide our own defined envs? whatever. Its a big point of discussion let me know what you think on this. 


Finally, first lets think this through before implementing it, brainstorm on it, ask questions, clarify things, and breaking down this lib step by step.
